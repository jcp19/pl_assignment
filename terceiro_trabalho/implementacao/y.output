Terminals unused in grammar

   str


State 2 conflicts: 1 shift/reduce


Grammar

    0 $accept: Programa $end

    1 Programa: Decl_block Fun_prods Main_block

    2 Decl_block: %empty
    3           | Decl_block type ident ';'
    4           | Decl_block type ident '[' Value ']' ';'
    5           | Decl_block type ident '[' Value ']' '[' Value ']' ';'
    6           | Decl_block type ident '=' Value ';'

    7 Fun_prods: %empty
    8          | Fun_prods Fun_prod

    9 Fun_prod: type ident '(' ')' '{' Decl_block LInstr '}'

   10 LInstr: %empty
   11       | LInstr Instr

   12 Instr: while '(' Value ')' '{' LInstr '}'
   13      | if '(' Value ')' '{' LInstr '}'
   14      | ident '=' Value ';'
   15      | ident '=' Value BOp Value ';'
   16      | ident '=' UOp Value ';'
   17      | Value ';'
   18      | ReturnExpr ';'

   19 Value: '(' Value ')'
   20      | str_literal
   21      | num
   22      | Function_call
   23      | ident '[' Value ']'
   24      | ident '[' Value ']' '[' Value ']'
   25      | ident

   26 ReturnExpr: ret
   27           | ret Value
   28           | ret Value BOp Value
   29           | ret UOp Value

   30 Function_call: ident '(' ')'

   31 BOp: '+'
   32    | '-'

   33 UOp: '+'
   34    | '-'

   35 Main_block: LInstr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 9 12 13 19 30
')' (41) 9 12 13 19 30
'+' (43) 31 33
'-' (45) 32 34
';' (59) 3 4 5 6 14 15 16 17 18
'=' (61) 6 14 15 16
'[' (91) 4 5 23 24
']' (93) 4 5 23 24
'{' (123) 9 12 13
'}' (125) 9 12 13
error (256)
type (258) 3 4 5 6 9
ident (259) 3 4 5 6 9 14 15 16 23 24 25 30
num (260) 21
str (261)
while (262) 12
if (263) 13
ret (264) 26 27 28 29
str_literal (265) 20


Nonterminals, with rules where they appear

$accept (21)
    on left: 0
Programa (22)
    on left: 1, on right: 0
Decl_block (23)
    on left: 2 3 4 5 6, on right: 1 3 4 5 6 9
Fun_prods (24)
    on left: 7 8, on right: 1 8
Fun_prod (25)
    on left: 9, on right: 8
LInstr (26)
    on left: 10 11, on right: 9 11 12 13 35
Instr (27)
    on left: 12 13 14 15 16 17 18, on right: 11
Value (28)
    on left: 19 20 21 22 23 24 25, on right: 4 5 6 12 13 14 15 16 17
    19 23 24 27 28 29
ReturnExpr (29)
    on left: 26 27 28 29, on right: 18
Function_call (30)
    on left: 30, on right: 22
BOp (31)
    on left: 31 32, on right: 15 28
UOp (32)
    on left: 33 34, on right: 16 29
Main_block (33)
    on left: 35, on right: 1


State 0

    0 $accept: . Programa $end

    $default  reduce using rule 2 (Decl_block)

    Programa    go to state 1
    Decl_block  go to state 2


State 1

    0 $accept: Programa . $end

    $end  shift, and go to state 3


State 2

    1 Programa: Decl_block . Fun_prods Main_block
    3 Decl_block: Decl_block . type ident ';'
    4           | Decl_block . type ident '[' Value ']' ';'
    5           | Decl_block . type ident '[' Value ']' '[' Value ']' ';'
    6           | Decl_block . type ident '=' Value ';'

    type  shift, and go to state 4

    type      [reduce using rule 7 (Fun_prods)]
    $default  reduce using rule 7 (Fun_prods)

    Fun_prods  go to state 5


State 3

    0 $accept: Programa $end .

    $default  accept


State 4

    3 Decl_block: Decl_block type . ident ';'
    4           | Decl_block type . ident '[' Value ']' ';'
    5           | Decl_block type . ident '[' Value ']' '[' Value ']' ';'
    6           | Decl_block type . ident '=' Value ';'

    ident  shift, and go to state 6


State 5

    1 Programa: Decl_block Fun_prods . Main_block
    8 Fun_prods: Fun_prods . Fun_prod

    type  shift, and go to state 7

    $default  reduce using rule 10 (LInstr)

    Fun_prod    go to state 8
    LInstr      go to state 9
    Main_block  go to state 10


State 6

    3 Decl_block: Decl_block type ident . ';'
    4           | Decl_block type ident . '[' Value ']' ';'
    5           | Decl_block type ident . '[' Value ']' '[' Value ']' ';'
    6           | Decl_block type ident . '=' Value ';'

    ';'  shift, and go to state 11
    '['  shift, and go to state 12
    '='  shift, and go to state 13


State 7

    9 Fun_prod: type . ident '(' ')' '{' Decl_block LInstr '}'

    ident  shift, and go to state 14


State 8

    8 Fun_prods: Fun_prods Fun_prod .

    $default  reduce using rule 8 (Fun_prods)


State 9

   11 LInstr: LInstr . Instr
   35 Main_block: LInstr .

    ident        shift, and go to state 15
    num          shift, and go to state 16
    while        shift, and go to state 17
    if           shift, and go to state 18
    ret          shift, and go to state 19
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    $default  reduce using rule 35 (Main_block)

    Instr          go to state 22
    Value          go to state 23
    ReturnExpr     go to state 24
    Function_call  go to state 25


State 10

    1 Programa: Decl_block Fun_prods Main_block .

    $default  reduce using rule 1 (Programa)


State 11

    3 Decl_block: Decl_block type ident ';' .

    $default  reduce using rule 3 (Decl_block)


State 12

    4 Decl_block: Decl_block type ident '[' . Value ']' ';'
    5           | Decl_block type ident '[' . Value ']' '[' Value ']' ';'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 27
    Function_call  go to state 25


State 13

    6 Decl_block: Decl_block type ident '=' . Value ';'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 28
    Function_call  go to state 25


State 14

    9 Fun_prod: type ident . '(' ')' '{' Decl_block LInstr '}'

    '('  shift, and go to state 29


State 15

   14 Instr: ident . '=' Value ';'
   15      | ident . '=' Value BOp Value ';'
   16      | ident . '=' UOp Value ';'
   23 Value: ident . '[' Value ']'
   24      | ident . '[' Value ']' '[' Value ']'
   25      | ident .
   30 Function_call: ident . '(' ')'

    '['  shift, and go to state 30
    '='  shift, and go to state 31
    '('  shift, and go to state 32

    $default  reduce using rule 25 (Value)


State 16

   21 Value: num .

    $default  reduce using rule 21 (Value)


State 17

   12 Instr: while . '(' Value ')' '{' LInstr '}'

    '('  shift, and go to state 33


State 18

   13 Instr: if . '(' Value ')' '{' LInstr '}'

    '('  shift, and go to state 34


State 19

   26 ReturnExpr: ret .
   27           | ret . Value
   28           | ret . Value BOp Value
   29           | ret . UOp Value

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21
    '+'          shift, and go to state 35
    '-'          shift, and go to state 36

    $default  reduce using rule 26 (ReturnExpr)

    Value          go to state 37
    Function_call  go to state 25
    UOp            go to state 38


State 20

   20 Value: str_literal .

    $default  reduce using rule 20 (Value)


State 21

   19 Value: '(' . Value ')'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 39
    Function_call  go to state 25


State 22

   11 LInstr: LInstr Instr .

    $default  reduce using rule 11 (LInstr)


State 23

   17 Instr: Value . ';'

    ';'  shift, and go to state 40


State 24

   18 Instr: ReturnExpr . ';'

    ';'  shift, and go to state 41


State 25

   22 Value: Function_call .

    $default  reduce using rule 22 (Value)


State 26

   23 Value: ident . '[' Value ']'
   24      | ident . '[' Value ']' '[' Value ']'
   25      | ident .
   30 Function_call: ident . '(' ')'

    '['  shift, and go to state 30
    '('  shift, and go to state 32

    $default  reduce using rule 25 (Value)


State 27

    4 Decl_block: Decl_block type ident '[' Value . ']' ';'
    5           | Decl_block type ident '[' Value . ']' '[' Value ']' ';'

    ']'  shift, and go to state 42


State 28

    6 Decl_block: Decl_block type ident '=' Value . ';'

    ';'  shift, and go to state 43


State 29

    9 Fun_prod: type ident '(' . ')' '{' Decl_block LInstr '}'

    ')'  shift, and go to state 44


State 30

   23 Value: ident '[' . Value ']'
   24      | ident '[' . Value ']' '[' Value ']'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 45
    Function_call  go to state 25


State 31

   14 Instr: ident '=' . Value ';'
   15      | ident '=' . Value BOp Value ';'
   16      | ident '=' . UOp Value ';'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21
    '+'          shift, and go to state 35
    '-'          shift, and go to state 36

    Value          go to state 46
    Function_call  go to state 25
    UOp            go to state 47


State 32

   30 Function_call: ident '(' . ')'

    ')'  shift, and go to state 48


State 33

   12 Instr: while '(' . Value ')' '{' LInstr '}'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 49
    Function_call  go to state 25


State 34

   13 Instr: if '(' . Value ')' '{' LInstr '}'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 50
    Function_call  go to state 25


State 35

   33 UOp: '+' .

    $default  reduce using rule 33 (UOp)


State 36

   34 UOp: '-' .

    $default  reduce using rule 34 (UOp)


State 37

   27 ReturnExpr: ret Value .
   28           | ret Value . BOp Value

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    $default  reduce using rule 27 (ReturnExpr)

    BOp  go to state 53


State 38

   29 ReturnExpr: ret UOp . Value

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 54
    Function_call  go to state 25


State 39

   19 Value: '(' Value . ')'

    ')'  shift, and go to state 55


State 40

   17 Instr: Value ';' .

    $default  reduce using rule 17 (Instr)


State 41

   18 Instr: ReturnExpr ';' .

    $default  reduce using rule 18 (Instr)


State 42

    4 Decl_block: Decl_block type ident '[' Value ']' . ';'
    5           | Decl_block type ident '[' Value ']' . '[' Value ']' ';'

    ';'  shift, and go to state 56
    '['  shift, and go to state 57


State 43

    6 Decl_block: Decl_block type ident '=' Value ';' .

    $default  reduce using rule 6 (Decl_block)


State 44

    9 Fun_prod: type ident '(' ')' . '{' Decl_block LInstr '}'

    '{'  shift, and go to state 58


State 45

   23 Value: ident '[' Value . ']'
   24      | ident '[' Value . ']' '[' Value ']'

    ']'  shift, and go to state 59


State 46

   14 Instr: ident '=' Value . ';'
   15      | ident '=' Value . BOp Value ';'

    ';'  shift, and go to state 60
    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    BOp  go to state 61


State 47

   16 Instr: ident '=' UOp . Value ';'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 62
    Function_call  go to state 25


State 48

   30 Function_call: ident '(' ')' .

    $default  reduce using rule 30 (Function_call)


State 49

   12 Instr: while '(' Value . ')' '{' LInstr '}'

    ')'  shift, and go to state 63


State 50

   13 Instr: if '(' Value . ')' '{' LInstr '}'

    ')'  shift, and go to state 64


State 51

   31 BOp: '+' .

    $default  reduce using rule 31 (BOp)


State 52

   32 BOp: '-' .

    $default  reduce using rule 32 (BOp)


State 53

   28 ReturnExpr: ret Value BOp . Value

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 65
    Function_call  go to state 25


State 54

   29 ReturnExpr: ret UOp Value .

    $default  reduce using rule 29 (ReturnExpr)


State 55

   19 Value: '(' Value ')' .

    $default  reduce using rule 19 (Value)


State 56

    4 Decl_block: Decl_block type ident '[' Value ']' ';' .

    $default  reduce using rule 4 (Decl_block)


State 57

    5 Decl_block: Decl_block type ident '[' Value ']' '[' . Value ']' ';'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 66
    Function_call  go to state 25


State 58

    9 Fun_prod: type ident '(' ')' '{' . Decl_block LInstr '}'

    $default  reduce using rule 2 (Decl_block)

    Decl_block  go to state 67


State 59

   23 Value: ident '[' Value ']' .
   24      | ident '[' Value ']' . '[' Value ']'

    '['  shift, and go to state 68

    $default  reduce using rule 23 (Value)


State 60

   14 Instr: ident '=' Value ';' .

    $default  reduce using rule 14 (Instr)


State 61

   15 Instr: ident '=' Value BOp . Value ';'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 69
    Function_call  go to state 25


State 62

   16 Instr: ident '=' UOp Value . ';'

    ';'  shift, and go to state 70


State 63

   12 Instr: while '(' Value ')' . '{' LInstr '}'

    '{'  shift, and go to state 71


State 64

   13 Instr: if '(' Value ')' . '{' LInstr '}'

    '{'  shift, and go to state 72


State 65

   28 ReturnExpr: ret Value BOp Value .

    $default  reduce using rule 28 (ReturnExpr)


State 66

    5 Decl_block: Decl_block type ident '[' Value ']' '[' Value . ']' ';'

    ']'  shift, and go to state 73


State 67

    3 Decl_block: Decl_block . type ident ';'
    4           | Decl_block . type ident '[' Value ']' ';'
    5           | Decl_block . type ident '[' Value ']' '[' Value ']' ';'
    6           | Decl_block . type ident '=' Value ';'
    9 Fun_prod: type ident '(' ')' '{' Decl_block . LInstr '}'

    type  shift, and go to state 4

    $default  reduce using rule 10 (LInstr)

    LInstr  go to state 74


State 68

   24 Value: ident '[' Value ']' '[' . Value ']'

    ident        shift, and go to state 26
    num          shift, and go to state 16
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21

    Value          go to state 75
    Function_call  go to state 25


State 69

   15 Instr: ident '=' Value BOp Value . ';'

    ';'  shift, and go to state 76


State 70

   16 Instr: ident '=' UOp Value ';' .

    $default  reduce using rule 16 (Instr)


State 71

   12 Instr: while '(' Value ')' '{' . LInstr '}'

    $default  reduce using rule 10 (LInstr)

    LInstr  go to state 77


State 72

   13 Instr: if '(' Value ')' '{' . LInstr '}'

    $default  reduce using rule 10 (LInstr)

    LInstr  go to state 78


State 73

    5 Decl_block: Decl_block type ident '[' Value ']' '[' Value ']' . ';'

    ';'  shift, and go to state 79


State 74

    9 Fun_prod: type ident '(' ')' '{' Decl_block LInstr . '}'
   11 LInstr: LInstr . Instr

    ident        shift, and go to state 15
    num          shift, and go to state 16
    while        shift, and go to state 17
    if           shift, and go to state 18
    ret          shift, and go to state 19
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21
    '}'          shift, and go to state 80

    Instr          go to state 22
    Value          go to state 23
    ReturnExpr     go to state 24
    Function_call  go to state 25


State 75

   24 Value: ident '[' Value ']' '[' Value . ']'

    ']'  shift, and go to state 81


State 76

   15 Instr: ident '=' Value BOp Value ';' .

    $default  reduce using rule 15 (Instr)


State 77

   11 LInstr: LInstr . Instr
   12 Instr: while '(' Value ')' '{' LInstr . '}'

    ident        shift, and go to state 15
    num          shift, and go to state 16
    while        shift, and go to state 17
    if           shift, and go to state 18
    ret          shift, and go to state 19
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21
    '}'          shift, and go to state 82

    Instr          go to state 22
    Value          go to state 23
    ReturnExpr     go to state 24
    Function_call  go to state 25


State 78

   11 LInstr: LInstr . Instr
   13 Instr: if '(' Value ')' '{' LInstr . '}'

    ident        shift, and go to state 15
    num          shift, and go to state 16
    while        shift, and go to state 17
    if           shift, and go to state 18
    ret          shift, and go to state 19
    str_literal  shift, and go to state 20
    '('          shift, and go to state 21
    '}'          shift, and go to state 83

    Instr          go to state 22
    Value          go to state 23
    ReturnExpr     go to state 24
    Function_call  go to state 25


State 79

    5 Decl_block: Decl_block type ident '[' Value ']' '[' Value ']' ';' .

    $default  reduce using rule 5 (Decl_block)


State 80

    9 Fun_prod: type ident '(' ')' '{' Decl_block LInstr '}' .

    $default  reduce using rule 9 (Fun_prod)


State 81

   24 Value: ident '[' Value ']' '[' Value ']' .

    $default  reduce using rule 24 (Value)


State 82

   12 Instr: while '(' Value ')' '{' LInstr '}' .

    $default  reduce using rule 12 (Instr)


State 83

   13 Instr: if '(' Value ')' '{' LInstr '}' .

    $default  reduce using rule 13 (Instr)
